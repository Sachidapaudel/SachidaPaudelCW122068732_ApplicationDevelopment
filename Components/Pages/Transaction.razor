@page "/transaction"
@using SachidaPaudel.Models
@using SachidaPaudel.Service.TransactionService
@using SachidaPaudel.Service.DebtsService
@inject ITransactionService TransactionService
@inject IDebtsService DebtsService
@inject ISnackbar Snackbar

<h2 class="text-center my-4 text-success">Transaction Manager</h2>

<!-- User Balance Section -->
<div class="alert alert-success text-center mb-4">
    <strong>Total Balance:</strong> @userBalance.ToString("C")
</div>

<!-- Success Message -->
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success text-center mb-4">
        @successMessage
    </div>
}

<!-- Search Transactions Section -->
<div class="card mb-4">
    <div class="card-header bg-light text-dark">
        <h5 class="mb-0">Search Transactions</h5>
    </div>
    <div class="card-body">
        <EditForm Model="searchCriteria" OnValidSubmit="SearchTransactionsAsync">
            <div class="row gy-2">
                <div class="col-md-3">
                    <InputText @bind-Value="searchCriteria.Title" class="form-control" placeholder="Title" />
                </div>
                <div class="col-md-2">
                    <InputSelect @bind-Value="searchCriteria.TransactionType" class="form-control" @onchange="OnTransactionTypeChanged">
                        <option value="">All Types</option>
                        <option value="Credit">Credit</option>
                        <option value="Debit">Debit</option>
                        <option value="Debt">Debt</option>
                    </InputSelect>
                </div>
                <div class="col-md-3">
                    <InputText @bind-Value="searchCriteria.Tags" class="form-control" placeholder="Tags (comma separated)" />
                </div>
                <div class="col-md-2">
                    <InputDate @bind-Value="searchCriteria.StartDate" class="form-control" />
                </div>
                <div class="col-md-2">
                    <InputDate @bind-Value="searchCriteria.EndDate" class="form-control" />
                </div>
            </div>
            <div class="row gy-2 mt-2">
                <div class="col-md-2">
                    <InputSelect @bind-Value="searchCriteria.SortBy" class="form-control">
                        <option value="Date">Date</option>
                        <option value="Title">Title</option>
                        <option value="Amount">Amount</option>
                    </InputSelect>
                </div>
                <div class="col-md-2">
                    <InputSelect @bind-Value="searchCriteria.Ascending" class="form-control">
                        <option value="true">Ascending</option>
                        <option value="false">Descending</option>
                    </InputSelect>
                </div>
                <div class="col-md-4 d-flex align-items-center">
                    <button type="submit" class="btn btn-success me-2">Search</button>
                    <button type="button" class="btn btn-secondary" @onclick="ClearSearchFilters">Clear</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<!-- Add New Transaction Button -->
<div class="text-end mb-4">
    <button class="btn btn-success" @onclick="ShowTransactionTypeButtons">Add Transaction</button>
</div>

<!-- Transaction Type Buttons -->
@if (showTransactionTypeButtons)
{
    <div class="text-center mb-4">
        <button class="btn btn-success me-2" @onclick="() => OpenAddTransactionModal(TransactionType.Credit)">Credit</button>
        <button class="btn btn-success me-2" @onclick="() => OpenAddTransactionModal(TransactionType.Debit)">Debit</button>
        <button class="btn btn-success" @onclick="() => OpenAddTransactionModal(TransactionType.Debt)">Debt</button>
    </div>
}

<!-- Transaction List Section -->
<div class="card">
    <div class="card-header bg-success text-white">
        <h5 class="mb-0">Transaction List</h5>
    </div>
    <div class="card-body">
        <table class="table table-hover">
            <thead class="thead-light">
                <tr>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Type</th>
                    <th>Date</th>
                    <th>Tags</th>
                    <th>Notes</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (transactions != null && transactions.Any())
                {
                    @foreach (var transaction in transactions)
                    {
                        <tr>
                            <td>@transaction.TransactionTitle</td>
                            <td>@transaction.TransactionAmount.ToString("C")</td>
                            <td>@transaction.TransactionTransactionType</td>
                            <td>@transaction.TransactionDate.ToString("MM/dd/yyyy")</td>
                            <td>@string.Join(", ", transaction.Tags)</td>
                            <td>@transaction.Note</td>
                            <td>
                                <button class="btn btn-warning btn-sm" @onclick="() => EditTransaction(transaction)">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteTransaction(transaction.TransactionId)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="text-center text-muted">No transactions available.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Add Transaction Modal -->
@if (isAddModalVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddTransactionModal"></button>
                </div>
                <div class="modal-body">
                    @if (newTransaction.TransactionTransactionType == TransactionType.Debt)
                    {
                        <EditForm Model="newDebt" OnValidSubmit="AddDebt">
                            <div class="mb-3">
                                <label for="source" class="form-label">Source</label>
                                <InputText id="source" class="form-control" @bind-Value="newDebt.DebtSource" required />
                                @if (string.IsNullOrEmpty(newDebt.DebtSource))
                                {
                                    <div class="text-danger">Source is required.</div>
                                }
                            </div>
                            <div class="mb-3">
                                <label for="amount" class="form-label">Amount</label>
                                <InputNumber id="amount" class="form-control" @bind-Value="newDebt.DebtAmount" required />
                                @if (newDebt.DebtAmount <= 0)
                                {
                                    <div class="text-danger">Amount must be greater than 0.</div>
                                }
                            </div>
                            <div class="mb-3">
                                <label for="dueDate" class="form-label">Due Date</label>
                                <InputDate id="dueDate" class="form-control" @bind-Value="newDebt.DebtDueDate" required />
                            </div>
                            <div class="text-end">
                                <button type="submit" class="btn btn-success">Submit</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseAddTransactionModal">Cancel</button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <EditForm Model="newTransaction" OnValidSubmit="AddTransaction">
                            <div class="mb-3">
                                <label for="addTitle" class="form-label">Title</label>
                                <InputText id="addTitle" @bind-Value="newTransaction.TransactionTitle" class="form-control" required />
                                @if (string.IsNullOrEmpty(newTransaction.TransactionTitle))
                                {
                                    <div class="text-danger">Title is required.</div>
                                }
                            </div>
                            <div class="mb-3">
                                <label for="addAmount" class="form-label">Amount</label>
                                <InputNumber id="addAmount" @bind-Value="newTransaction.TransactionAmount" class="form-control" required />
                                @if (newTransaction.TransactionAmount <= 0)
                                {
                                    <div class="text-danger">Amount must be greater than 0.</div>
                                }
                            </div>
                            <div class="mb-3">
                                <label for="addType" class="form-label">Type</label>
                                <InputSelect id="addType" @bind-Value="newTransaction.TransactionTransactionType" class="form-control" @onchange="OnTransactionTypeChanged">
                                    <option value="Credit">Credit</option>
                                    <option value="Debit">Debit</option>
                                </InputSelect>
                            </div>
                            <div class="mb-3">
                                <label for="addDate" class="form-label">Date</label>
                                <InputDate id="addDate" @bind-Value="newTransaction.TransactionDate" class="form-control" required />
                            </div>
                            <div class="mb-3">
                                <label for="existingTags" class="form-label">Existing Tags</label>
                                <InputSelect id="existingTags" @bind-Value="selectedExistingTag" class="form-control">
                                    <option value="">Select a tag</option>
                                    @foreach (var tag in existingTags)
                                    {
                                        <option value="@tag">@tag</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="mb-3">
                                <label for="addTags" class="form-label">Custom Tags</label>
                                <InputText id="addTags" @bind-Value="customTagInput" class="form-control" placeholder="Tags (comma separated)" />
                                @if (string.IsNullOrEmpty(customTagInput) && string.IsNullOrEmpty(selectedExistingTag))
                                {
                                    <div class="text-danger">At least one tag is required.</div>
                                }
                            </div>
                            <div class="mb-3">
                                <label for="addNote" class="form-label">Notes</label>
                                <InputText id="addNote" @bind-Value="newTransaction.Note" class="form-control" />
                            </div>
                            <div class="text-end">
                                <button type="submit" class="btn btn-success" disabled="@(!IsValidTransaction(newTransaction))">Add Transaction</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseAddTransactionModal">Cancel</button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Edit Transaction Modal -->
@if (isEditModalVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">Edit Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editTransaction" OnValidSubmit="UpdateTransaction">
                        <div class="mb-3">
                            <label for="editTitle" class="form-label">Title</label>
                            <InputText id="editTitle" @bind-Value="editTransaction.TransactionTitle" class="form-control" required />
                        </div>
                        <div class="mb-3">
                            <label for="editAmount" class="form-label">Amount</label>
                            <InputNumber id="editAmount" @bind-Value="editTransaction.TransactionAmount" class="form-control" required />
                            @if (editTransaction.TransactionAmount <= 0)
                            {
                                <div class="text-danger">Amount must be greater than 0.</div>
                            }
                        </div>
                        <div class="mb-3">
                            <label for="editType" class="form-label">Type</label>
                            <InputSelect id="editType" @bind-Value="editTransaction.TransactionTransactionType" class="form-control">
                                <option value="Credit">Credit</option>
                                <option value="Debit">Debit</option>
                                <option value="Debt">Debt</option>
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label for="editDate" class="form-label">Date</label>
                            <InputDate id="editDate" @bind-Value="editTransaction.TransactionDate" class="form-control" required />
                        </div>
                        <div class="mb-3">
                            <label for="editTags" class="form-label">Tags</label>
                            <InputText id="editTags" @bind-Value="editTagsInput" class="form-control" placeholder="Tags (comma separated)" />
                        </div>
                        <div class="mb-3">
                            <label for="editNote" class="form-label">Notes</label>
                            <InputText id="editNote" @bind-Value="editTransaction.Note" class="form-control" />
                        </div>
                        <div class="text-end">
                            <button type="submit" class="btn btn-success" disabled="@(!IsValidTransaction(editTransaction))">Save Changes</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Insufficient Balance Modal -->
@if (isInsufficientBalanceModalVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Insufficient Balance</h5>
                    <button type="button" class="btn-close" @onclick="CloseInsufficientBalanceModal"></button>
                </div>
                <div class="modal-body">
                    <p>You do not have sufficient balance to complete this transaction.</p>
                    <div class="text-end">
                        <button type="button" class="btn btn-secondary" @onclick="CloseInsufficientBalanceModal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<SachidaPaudel.Models.Transaction> transactions = new List<SachidaPaudel.Models.Transaction>();
    private SachidaPaudel.Models.Transaction newTransaction = new SachidaPaudel.Models.Transaction() { TransactionDate = DateTime.Now };
    private SachidaPaudel.Models.Transaction editTransaction = new SachidaPaudel.Models.Transaction();
    private SachidaPaudel.Models.Debts newDebt = new SachidaPaudel.Models.Debts() { DebtDueDate = DateTime.Now };
    private List<SachidaPaudel.Models.Transaction> pendingDebts = new List<SachidaPaudel.Models.Transaction>();
    private List<string> existingTags = new List<string>
    {
        "Yearly", "Monthly", "Food", "Drinks", "Clothes", "Gadgets", "Miscellaneous", "Fuel", "Rent", "EMI", "Party"
    }; // List of existing tags
    private string selectedExistingTag = "";
    private string customTagInput = "";
    private string tagsInput = "";
    private string editTagsInput = "";
    private decimal userBalance;
    private SearchCriteria searchCriteria = new SearchCriteria();
    private bool isAddModalVisible = false;
    private bool isEditModalVisible = false;
    private bool isInsufficientBalanceModalVisible = false;
    private bool isDebtTransaction = false;
    private bool showTransactionTypeButtons = false;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetTransactionsAsync(); // Fetch existing transactions
        userBalance = await TransactionService.GetUserBalanceAsync(); // Fetch user balance
        pendingDebts = await TransactionService.GetPendingDebtsAsync(); // Fetch pending debts

        // Subscribe to the DebtCleared event
        DebtsService.DebtCleared += async (sender, e) =>
        {
            userBalance = await TransactionService.GetUserBalanceAsync();
            StateHasChanged();
        };
    }

    private void ShowTransactionTypeButtons()
    {
        showTransactionTypeButtons = true;
    }

    private void OpenAddTransactionModal(TransactionType transactionType)
    {
        newTransaction.TransactionTransactionType = transactionType;
        isAddModalVisible = true;
        showTransactionTypeButtons = false;
    }

    private void CloseAddTransactionModal()
    {
        isAddModalVisible = false;
        isDebtTransaction = false; // Reset the flag when closing the modal
    }

    private void CloseInsufficientBalanceModal()
    {
        isInsufficientBalanceModalVisible = false;
    }

    private bool IsValidTransaction(SachidaPaudel.Models.Transaction transaction)
    {
        return !string.IsNullOrEmpty(transaction.TransactionTitle) && transaction.TransactionAmount > 0;
    }

    private async Task AddTransaction()
    {
        // Combine selected existing tag and custom tags
        var tags = new List<string>();
        if (!string.IsNullOrEmpty(selectedExistingTag))
        {
            tags.Add(selectedExistingTag);
        }
        if (!string.IsNullOrEmpty(customTagInput))
        {
            tags.AddRange(customTagInput.Split(',').Select(tag => tag.Trim()));
        }
        newTransaction.Tags = tags;

        // Check for sufficient balance for outflows
        if (newTransaction.TransactionTransactionType == TransactionType.Debit && newTransaction.TransactionAmount > userBalance)
        {
            isInsufficientBalanceModalVisible = true;
            return;
        }

        try
        {
            // Add the new transaction using the service
            await TransactionService.AddTransactionAsync(newTransaction);

            // If the transaction is a debt, add it to the debts list and update the balance
            if (newTransaction.TransactionTransactionType == TransactionType.Debt)
            {
                newDebt.DebtSource = newTransaction.TransactionTitle;
                newDebt.DebtAmount = newTransaction.TransactionAmount;
                await DebtsService.AddDebtAsync(newDebt);
                userBalance += newDebt.DebtAmount; // Add debt amount to balance
            }

            // Refresh the transaction list and user balance
            transactions = await TransactionService.GetTransactionsAsync();
            userBalance = await TransactionService.GetUserBalanceAsync();
            pendingDebts = await TransactionService.GetPendingDebtsAsync(); // Refresh pending debts

            // Reset form fields after adding the transaction
            newTransaction = new SachidaPaudel.Models.Transaction() { TransactionDate = DateTime.Now };
            newDebt = new SachidaPaudel.Models.Debts() { DebtDueDate = DateTime.Now };
            selectedExistingTag = "";
            customTagInput = "";
            CloseAddTransactionModal();

            // Show success message
            Snackbar.Add("Transaction successfully added!", Severity.Success);
        }
        catch (InvalidOperationException ex)
        {
            // Handle exception or display error message
            Console.WriteLine(ex.Message);
        }
    }

    private async Task AddDebt()
    {
        try
        {
            await DebtsService.AddDebtAsync(newDebt);
            userBalance += newDebt.DebtAmount; // Add debt amount to balance

            // Refresh the transaction list and user balance
            transactions = await TransactionService.GetTransactionsAsync();
            userBalance = await TransactionService.GetUserBalanceAsync();
            pendingDebts = await TransactionService.GetPendingDebtsAsync(); // Refresh pending debts

            // Reset form fields after adding the debt
            newDebt = new SachidaPaudel.Models.Debts() { DebtDueDate = DateTime.Now };
            CloseAddTransactionModal();

            // Show success message
            Snackbar.Add("Debt successfully added!", Severity.Success);
        }
        catch (InvalidOperationException ex)
        {
            // Handle exception or display error message
            Console.WriteLine(ex.Message);
        }
    }

    private async Task UpdateTransaction()
    {
        // Parse tags from the comma-separated input and remove leading/trailing spaces
        editTransaction.Tags = editTagsInput.Split(',').Select(tag => tag.Trim()).ToList();

        try
        {
            // Update the transaction using the service
            await TransactionService.UpdateTransactionAsync(editTransaction);

            // Refresh the transaction list and user balance
            transactions = await TransactionService.GetTransactionsAsync();
            userBalance = await TransactionService.GetUserBalanceAsync();
            pendingDebts = await TransactionService.GetPendingDebtsAsync(); // Refresh pending debts

            // Close the edit modal
            CloseEditModal();

            // Show success message
            Snackbar.Add("Transaction successfully updated!", Severity.Success);
        }
        catch (InvalidOperationException ex)
        {
            // Handle exception or display error message
            Console.WriteLine(ex.Message);
        }
    }

    private async Task DeleteTransaction(int transactionId)
    {
        try
        {
            await TransactionService.DeleteTransactionAsync(transactionId);

            // Refresh the transaction list and user balance
            transactions = await TransactionService.GetTransactionsAsync();
            userBalance = await TransactionService.GetUserBalanceAsync();
            pendingDebts = await TransactionService.GetPendingDebtsAsync(); // Refresh pending debts

            // Show success message
            Snackbar.Add("Transaction successfully deleted!", Severity.Success);
        }
        catch (InvalidOperationException ex)
        {
            // Handle exception or display error message
            Console.WriteLine(ex.Message);
        }
    }

    private void EditTransaction(SachidaPaudel.Models.Transaction transaction)
    {
        editTransaction = transaction;
        editTagsInput = string.Join(", ", transaction.Tags);
        isEditModalVisible = true;
    }

    private void CloseEditModal()
    {
        isEditModalVisible = false;
    }

    private async Task SearchTransactionsAsync()
    {
        var tags = string.IsNullOrEmpty(searchCriteria.Tags) ? new List<string>() : searchCriteria.Tags.Split(',').Select(tag => tag.Trim()).ToList();
        transactions = await TransactionService.SearchTransactionsAsync(
            searchCriteria.Title,
            searchCriteria.TransactionType,
            tags,
            searchCriteria.StartDate,
            searchCriteria.EndDate,
            searchCriteria.SortBy,
            searchCriteria.Ascending
        );
    }

    private async Task ClearSearchFilters()
    {
        searchCriteria = new SearchCriteria();
        transactions = await TransactionService.GetTransactionsAsync();
    }

    private void OnTransactionTypeChanged(ChangeEventArgs e)
    {
        isDebtTransaction = e.Value?.ToString() == "Debt";
    }

    private class SearchCriteria
    {
        public string Title { get; set; } = string.Empty;
        public string TransactionType { get; set; } = string.Empty;
        public string Tags { get; set; } = string.Empty;
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string SortBy { get; set; } = "Date";
        public bool Ascending { get; set; } = true;
    }
}
