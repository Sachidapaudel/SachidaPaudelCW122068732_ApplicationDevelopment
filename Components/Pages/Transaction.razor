@page "/transaction"
@using SachidaPaudel.Models
@using SachidaPaudel.Service.TransactionService
@inject ITransactionService TransactionService

<h2 class="text-center my-4">Transaction Manager</h2>
<div class="user-balance">
    <h4>Total Balance: @userBalance.ToString("C")</h4>
</div>

<!-- Display Pending Debts -->
<div class="pending-debts">
    <h4>Pending Debts</h4>
    <ul>
        @foreach (var debt in pendingDebts)
        {
            <li>@debt.TransactionTitle - Date: @debt.TransactionDate.ToString("MM/dd/yyyy")</li>
        }
    </ul>
</div>
<div class="search-transactions">
    <h4>Search Transactions</h4>
    <EditForm Model="searchCriteria" OnValidSubmit="SearchTransactionsAsync">
        <div class="row">
            <div class="col">
                <InputText @bind-Value="searchCriteria.Title" class="form-control" placeholder="Title" />
            </div>
            <div class="col">
                <InputSelect @bind-Value="searchCriteria.TransactionType" class="form-control">
                    <option value="">All Types</option>
                    <option value="Credit">Credit</option>
                    <option value="Debit">Debit</option>
                    <option value="Debt">Debt</option>
                </InputSelect>
            </div>
            <div class="col">
                <InputText @bind-Value="searchCriteria.Tags" class="form-control" placeholder="Tags (comma separated)" />
            </div>
            <div class="col">
                <InputDate @bind-Value="searchCriteria.StartDate" class="form-control" />
            </div>
            <div class="col">
                <InputDate @bind-Value="searchCriteria.EndDate" class="form-control" />
            </div>
            <div class="col">
                <InputSelect @bind-Value="searchCriteria.SortBy" class="form-control">
                    <option value="Date">Date</option>
                    <option value="Title">Title</option>
                    <option value="Amount">Amount</option>
                </InputSelect>
            </div>
            <div class="col">
                <InputSelect @bind-Value="searchCriteria.Ascending" class="form-control">
                    <option value="true">Ascending</option>
                    <option value="false">Descending</option>
                </InputSelect>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-primary">Search</button>
            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-secondary" @onclick="ClearSearchFilters">Clear</button>
            </div>
        </div>
    </EditForm>
</div>

<div class="container">

    <!-- Add New Transaction Section -->
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Add New Transaction</h5>
        </div>
        <div class="card-body">
            <EditForm Model="newTransaction" OnValidSubmit="AddTransaction">
                <div class="row gy-3">
                    <div class="col-md-3">
                        <InputText @bind-Value="newTransaction.TransactionTitle" class="form-control" placeholder="Title" required />
                    </div>
                    <div class="col-md-2">
                        <InputNumber @bind-Value="newTransaction.TransactionAmount" class="form-control" placeholder="Amount" required />
                    </div>
                    <div class="col-md-2">
                        <InputSelect @bind-Value="newTransaction.TransactionTransactionType" class="form-control">
                            <option value="Credit">Credit</option>
                            <option value="Debit">Debit</option>
                            <option value="Debt">Debt</option>
                        </InputSelect>
                    </div>
                    <div class="col-md-3">
                        <InputDate @bind-Value="newTransaction.TransactionDate" class="form-control" required />
                    </div>
                    <div class="col-md-2">
                        <InputText @bind-Value="tagsInput" class="form-control" placeholder="Tags (comma separated)" />
                    </div>
                    <div class="col-md-12">
                        <InputText @bind-Value="newTransaction.Note" class="form-control" placeholder="Notes" />
                    </div>
                </div>
                <div class="mt-3 text-end">
                    <button type="submit" class="btn btn-primary">
                        Add Transaction
                    </button>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Display All Transactions Section -->
    <div class="card">
        <div class="card-header bg-secondary text-white">
            <h5 class="mb-0">Transaction List</h5>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Title</th>
                        <th>Amount</th>
                        <th>Type</th>
                        <th>Date</th>
                        <th>Tags</th>
                        <th>Notes</th>
                    </tr>
                </thead>
                <tbody>
                    @if (transactions != null && transactions.Any())
                    {
                        foreach (var transaction in transactions)
                        {
                            <tr>
                                <td>@transaction.TransactionTitle</td>
                                <td>@transaction.TransactionAmount</td>
                                <td>@transaction.TransactionTransactionType</td>
                                <td>@transaction.TransactionDate.ToString("d")</td>
                                <td>@string.Join(", ", transaction.Tags)</td>
                                <td>@transaction.Note</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center">No transactions available.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<SachidaPaudel.Models.Transaction> transactions = new List<SachidaPaudel.Models.Transaction>();
    private SachidaPaudel.Models.Transaction newTransaction = new SachidaPaudel.Models.Transaction() { TransactionDate = DateTime.Now };
    private List<SachidaPaudel.Models.Transaction> pendingDebts = new List<SachidaPaudel.Models.Transaction>();
    private string tagsInput = "";
    private decimal userBalance;
    private SearchCriteria searchCriteria = new SearchCriteria();

    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetTransactionsAsync(); // Fetch existing transactions
        userBalance = await TransactionService.GetUserBalanceAsync(); // Fetch user balance
        pendingDebts = await TransactionService.GetPendingDebtsAsync(); // Fetch pending debts
    }

    private async Task AddTransaction()
    {
        // Parse tags from the comma-separated input and remove leading/trailing spaces
        newTransaction.Tags = tagsInput.Split(',')
                                        .Select(tag => tag.Trim())
                                        .ToList();

        try
        {
            // Add the new transaction using the service
            await TransactionService.AddTransactionAsync(newTransaction);

            // Refresh the transaction list and user balance
            transactions = await TransactionService.GetTransactionsAsync();
            userBalance = await TransactionService.GetUserBalanceAsync();

            // Reset form fields after adding the transaction
            newTransaction = new SachidaPaudel.Models.Transaction() { TransactionDate = DateTime.Now };
            tagsInput = "";
        }
        catch (InvalidOperationException ex)
        {
            // Handle exception or display error message
            Console.WriteLine(ex.Message);
        }
    }

    private async Task SearchTransactionsAsync()
    {
        var tags = string.IsNullOrEmpty(searchCriteria.Tags) ? new List<string>() : searchCriteria.Tags.Split(',').Select(tag => tag.Trim()).ToList();
        transactions = await TransactionService.SearchTransactionsAsync(
            searchCriteria.Title,
            searchCriteria.TransactionType,
            tags,
            searchCriteria.StartDate,
            searchCriteria.EndDate,
            searchCriteria.SortBy,
            searchCriteria.Ascending
        );
    }

    private async Task ClearSearchFilters()
    {
        searchCriteria = new SearchCriteria();
        transactions = await TransactionService.GetTransactionsAsync();
    }

    private class SearchCriteria
    {
        public string Title { get; set; }
        public string TransactionType { get; set; }
        public string Tags { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string SortBy { get; set; } = "Date";
        public bool Ascending { get; set; } = true;
    }
}
