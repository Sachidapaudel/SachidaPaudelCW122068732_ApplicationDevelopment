@page "/debts"
@using SachidaPaudel.Models
@using SachidaPaudel.Service.DebtsService
@inject IDebtsService DebtsService

<div class="container py-4">
    <h3 class="text-center mb-4">Debts Management</h3>

    <!-- Display All Debts -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
            <h4 class="card-title mb-0">All Debts</h4>
        </div>
        <div class="card-body">
            <table class="table table-striped table-responsive-md">
                <thead class="table-dark">
                    <tr>
                        <th>Source</th>
                        <th>Amount</th>
                        <th>Due Date</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (debts != null && debts.Any())
                    {
                        foreach (var debt in debts)
                        {
                            <tr>
                                <td>@debt.DebtSource</td>
                                <td>@debt.DebtAmount.ToString("C")</td>
                                <td>@debt.DebtDueDate.ToString("MM/dd/yyyy")</td>
                                <td>
                                    <span class="badge @(debt.IsCleared ? "bg-success" : "bg-warning")">
                                        @(debt.IsCleared ? "Cleared" : "Pending")
                                    </span>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-center text-muted">No debts available.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Add New Debt -->
    <div class="card shadow-sm">
        <div class="card-header bg-secondary text-white">
            <h4 class="card-title mb-0">Add New Debt</h4>
        </div>
        <div class="card-body">
            <EditForm Model="newDebt" OnValidSubmit="AddDebtAsync">
                <div class="row gy-3">
                    <div class="col-md-3">
                        <InputText @bind-Value="newDebt.DebtSource" class="form-control" placeholder="Source" required />
                    </div>
                    <div class="col-md-2">
                        <InputNumber @bind-Value="newDebt.DebtAmount" class="form-control" placeholder="Amount" required />
                    </div>
                    <div class="col-md-3">
                        <InputDate @bind-Value="newDebt.DebtDueDate" class="form-control" required />
                    </div>
                    <div class="col-md-2">
                        <InputSelect @bind-Value="newDebt.IsCleared" class="form-control" required>
                            <option value="true">Cleared</option>
                            <option value="false">Pending</option>
                        </InputSelect>
                    </div>
                    <div class="col-md-2 text-end">
                        <button type="submit" class="btn btn-success w-100">
                            <i class="bi bi-plus-circle"></i> Add Debt
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private List<SachidaPaudel.Models.Debts> debts = new List<SachidaPaudel.Models.Debts>();
    private SachidaPaudel.Models.Debts newDebt = new SachidaPaudel.Models.Debts() { DebtDueDate = DateTime.Now };

    protected override async Task OnInitializedAsync()
    {
        debts = await DebtsService.GetDebtsAsync(); // Fetch all debts
    }

    private async Task AddDebtAsync()
    {
        await DebtsService.AddDebtAsync(newDebt); // Add the new debt

        // Refresh the debt list
        debts = await DebtsService.GetDebtsAsync();

        // Reset form fields after adding the debt
        newDebt = new SachidaPaudel.Models.Debts() { DebtDueDate = DateTime.Now };
    }
}
