@page "/debts"
@using SachidaPaudel.Models
@using SachidaPaudel.Service.DebtsService
@using SachidaPaudel.Service.TransactionService
@inject IDebtsService DebtsService
@inject ITransactionService TransactionService
@inject IJSRuntime JSRuntime

<div class="container py-4">
    <!-- Page Title -->
    <h3 class="text-center mb-4 text-success">Debts Management</h3>

    <!-- Display Total Debt Amount -->
    <div class="total-debt mb-4">
        <h4>Total Debt: @totalDebtAmount.ToString("C")</h4>
    </div>

    <!-- Display All Debts -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-success text-white">
            <h4 class="card-title mb-0">All Debts</h4>
        </div>
        <div class="card-body">
            <table class="table table-striped table-responsive-md">
                <thead class="table-success">
                    <tr>
                        <th>ID</th>
                        <th>Source</th>
                        <th>Amount</th>
                        <th>Due Date</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (debts != null && debts.Any())
                    {
                        foreach (var debt in debts)
                        {
                            <tr>
                                <td>@debt.DebtId</td>
                                <td>@debt.DebtSource</td>
                                <td>@debt.DebtAmount.ToString("C")</td>
                                <td>@debt.DebtDueDate.ToString("MM/dd/yyyy")</td>
                                <td>
                                    <span class="badge @(debt.IsCleared ? "bg-success" : "bg-warning")">
                                        @(debt.IsCleared ? "Cleared" : "Pending")
                                    </span>
                                </td>
                                <td>
                                    <button class="btn btn-outline-success btn-sm" @onclick="() => EditDebt(debt)">Edit</button>
                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteDebt(debt.DebtId)">Delete</button>
                                    @if (!debt.IsCleared)
                                    {
                                        <button class="btn btn-outline-warning btn-sm" @onclick="() => ConfirmClearDebt(debt.DebtId)">Clear Now</button>
                                    }
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center text-muted">No debts available.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Edit Debt -->
    <div class="card shadow-sm">
        <div class="card-header bg-dark text-white">
            <h4 class="card-title mb-0">Edit Debt</h4>
        </div>
        <div class="card-body">
            <EditForm Model="currentDebt" OnValidSubmit="SaveDebtAsync">
                <div class="row gy-3">
                    <div class="col-md-3">
                        <InputText @bind-Value="currentDebt.DebtSource" class="form-control" placeholder="Source" required />
                    </div>
                    <div class="col-md-2">
                        <InputNumber @bind-Value="currentDebt.DebtAmount" class="form-control" placeholder="Amount" required />
                    </div>
                    <div class="col-md-3">
                        <InputDate @bind-Value="currentDebt.DebtDueDate" class="form-control" required />
                    </div>
                    <div class="col-md-2">
                        <InputSelect @bind-Value="currentDebt.IsCleared" class="form-control" required>
                            <option value="true">Cleared</option>
                            <option value="false">Pending</option>
                        </InputSelect>
                    </div>
                    <div class="col-md-2 text-end">
                        <button type="submit" class="btn btn-outline-success w-100">
                            <i class="bi bi-save"></i> Save Changes
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Display Error Message -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
</div>

@code {
    private List<SachidaPaudel.Models.Debts> debts = new List<SachidaPaudel.Models.Debts>();
    private SachidaPaudel.Models.Debts currentDebt = new SachidaPaudel.Models.Debts() { DebtDueDate = DateTime.Now };
    private decimal totalDebtAmount;
    private bool isEditMode = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadDebtsAsync();
    }

    private async Task LoadDebtsAsync()
    {
        debts = await DebtsService.GetDebtsAsync(); // Fetch all debts
        totalDebtAmount = debts.Where(d => !d.IsCleared).Sum(d => d.DebtAmount); // Calculate total debt amount
    }

    private async Task SaveDebtAsync()
    {
        if (isEditMode)
        {
            await DebtsService.UpdateDebtAsync(currentDebt); // Update the debt
        }

        // Refresh the debt list
        await LoadDebtsAsync();

        // Reset form fields after saving the debt
        currentDebt = new SachidaPaudel.Models.Debts() { DebtDueDate = DateTime.Now };
        isEditMode = false;
    }

    private void EditDebt(SachidaPaudel.Models.Debts debt)
    {
        currentDebt = debt;
        isEditMode = true;
    }

    private async Task DeleteDebt(int debtId)
    {
        await DebtsService.RemoveDebtAsync(debtId); // Delete the debt

        // Refresh the debt list
        await LoadDebtsAsync();
    }

    private async Task ConfirmClearDebt(int debtId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Do you want to clear the debt?" }))
        {
            await ClearDebt(debtId);
        }
    }

    private async Task ClearDebt(int debtId)
    {
        var debt = debts.FirstOrDefault(d => d.DebtId == debtId);
        if (debt != null)
        {
            try
            {
                var userBalance = await TransactionService.GetUserBalanceAsync();
                await DebtsService.ClearDebtAsync(debtId, userBalance);
                await LoadDebtsAsync(); // Refresh the debts list
                errorMessage = string.Empty; // Clear error message
            }
            catch (InvalidOperationException ex)
            {
                errorMessage = ex.Message; // Display error message
            }
            catch (ArgumentException ex)
            {
                errorMessage = ex.Message; // Display error message
            }
        }
    }
}

