@page "/"
@using SachidaPaudel.Service.TransactionService
@using SachidaPaudel.Service.DebtsService
@using SachidaPaudel.Models
@inject ITransactionService TransactionService
@inject IDebtsService DebtService

<div class="container mt-5">
    <!-- Dashboard Header -->
    <div class="text-center mb-4">
        <h2 class="fw-bold" style="color: #198754;">💰 TRACK IT Dashboard</h2>
        <p class="text-muted">Your financial summary at a glance.</p>
    </div>

    <!-- Date Range Filter -->
    <div class="row mb-4">
        <div class="col-md-5">
            <label for="startDate" class="form-label" style="color: #198754;">Start Date</label>
            <InputDate id="startDate" @bind-Value="searchCriteria.StartDate" class="form-control border-success" />
        </div>
        <div class="col-md-5">
            <label for="endDate" class="form-label" style="color: #198754;">End Date</label>
            <InputDate id="endDate" @bind-Value="searchCriteria.EndDate" class="form-control border-success" />
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-success me-2 w-100" style="background-color: #198754;" @onclick="LoadDashboardData">Filter</button>
            <button class="btn btn-outline-success w-100" style="border-color: #198754; color: #198754;" @onclick="ClearFilters">Clear</button>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row text-center mb-5">
        <div class="col-md-4 mb-4">
            <div class="card shadow border-0 h-100" style="border-top: 4px solid #198754;">
                <div class="card-body">
                    <h5 class="card-title" style="color: #198754;">Total Cash Inflows</h5>
                    <h3 class="fw-bold" style="color: #198754;">@totalCashInflows.ToString("C")</h3>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-4">
            <div class="card shadow border-0 h-100" style="border-top: 4px solid #198754;">
                <div class="card-body">
                    <h5 class="card-title" style="color: #198754;">Total Cash Outflows</h5>
                    <h3 class="fw-bold text-danger">@totalCashOutflows.ToString("C")</h3>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-4">
            <div class="card shadow border-0 h-100" style="border-top: 4px solid #198754;">
                <div class="card-body">
                    <h5 class="card-title" style="color: #198754;">Remaining Debts</h5>
                    <h3 class="fw-bold text-warning">@remainingDebts.ToString("C")</h3>
                </div>
            </div>
        </div>
    </div>

    <!-- Highest/Lowest Inflow and Outflow -->
    <div class="row text-center mb-5">
        <div class="col-md-6 mb-4">
            <div class="card shadow border-0 h-100" style="border-top: 4px solid #198754;">
                <div class="card-body">
                    <h5 class="card-title" style="color: #198754;">Highest Inflow</h5>
                    @if (highestInflow != null)
                    {
                        <h3 class="fw-bold" style="color: #198754;">@highestInflow.TransactionAmount.ToString("C")</h3>
                        <p class="text-muted">@highestInflow.TransactionTitle</p>
                        <p class="text-muted">@highestInflow.TransactionDate.ToString("d")</p>
                    }
                    else
                    {
                        <h3 class="fw-bold text-muted">N/A</h3>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card shadow border-0 h-100" style="border-top: 4px solid #198754;">
                <div class="card-body">
                    <h5 class="card-title" style="color: #198754;">Highest Outflow</h5>
                    @if (highestOutflow != null)
                    {
                        <h3 class="fw-bold text-danger">@highestOutflow.TransactionAmount.ToString("C")</h3>
                        <p class="text-muted">@highestOutflow.TransactionTitle</p>
                        <p class="text-muted">@highestOutflow.TransactionDate.ToString("d")</p>
                    }
                    else
                    {
                        <h3 class="fw-bold text-muted">N/A</h3>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Debts Section -->
    <div class="row mb-5">
        <div class="col-md-6">
            <div class="card shadow border-0 h-100" style="border-top: 4px solid #198754;">
                <div class="card-body">
                    <h5 class="card-title" style="color: #198754;">Cleared Debts</h5>
                    <h4 class="fw-bold" style="color: #198754;">@clearedDebts.ToString("C")</h4>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card shadow border-0 h-100" style="border-top: 4px solid #198754; background-color: #eaf5e0;">
                <div class="card-body">
                    <h5 class="card-title" style="color: #198754;">Pending Debts</h5>
                    <ul class="list-group list-group-flush">
                        @foreach (var debt in pendingDebts)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center"
                                style="background-color: #f0f8f1; border-left: 4px solid #198754;">
                                @debt.DebtSource
                                <span class="badge" style="background-color: #198754;">@debt.DebtAmount.ToString("C")</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

    </div>

    <!-- Transactions Section -->
    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="card shadow border-0 h-100" style="border-top: 4px solid #198754;">
                <div class="card-body">
                    <h5 class="card-title" style="color: #198754;">Top 5 Highest Transactions</h5>
                    <ul class="list-group list-group-flush">
                        @foreach (var transaction in topHighestTransactions)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    @transaction.TransactionTitle
                                    <br />
                                    <small class="text-muted">@transaction.TransactionDate.ToString("d")</small>
                                </div>
                                <span class="badge" style="background-color: #198754;">@transaction.TransactionAmount.ToString("C")</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card shadow border-0 h-100" style="border-top: 4px solid #198754;">
                <div class="card-body">
                    <h5 class="card-title" style="color: #198754;">Top 5 Lowest Transactions</h5>
                    <ul class="list-group list-group-flush">
                        @foreach (var transaction in topLowestTransactions)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    @transaction.TransactionTitle
                                    <br />
                                    <small class="text-muted">@transaction.TransactionDate.ToString("d")</small>
                                </div>
                                <span class="badge" style="background-color: #198754;">@transaction.TransactionAmount.ToString("C")</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        transition: transform 0.2s;
    }

        .card:hover {
            transform: translateY(-5px);
        }

    .badge {
        font-size: 0.9em;
        padding: 8px 12px;
    }
</style>
@code {
    private decimal totalCashInflows;
    private decimal totalCashOutflows;
    private decimal totalDebts;
    private decimal clearedDebts;
    private decimal remainingDebts;
    private List<SachidaPaudel.Models.Debts> pendingDebts = new List<SachidaPaudel.Models.Debts>();
    private List<SachidaPaudel.Models.Transaction> topHighestTransactions = new List<SachidaPaudel.Models.Transaction>();
    private List<SachidaPaudel.Models.Transaction> topLowestTransactions = new List<SachidaPaudel.Models.Transaction>();
    private SachidaPaudel.Models.Transaction? highestInflow;
    private SachidaPaudel.Models.Transaction? highestOutflow;
    private SachidaPaudel.Models.Transaction? lowestInflow;
    private SachidaPaudel.Models.Transaction? lowestOutflow;
    private SearchCriteria searchCriteria = new SearchCriteria();

    protected override async Task OnInitializedAsync()
    {
        SetDefaultDates();
        await LoadDashboardData();
    }

    private void SetDefaultDates()
    {
        searchCriteria.StartDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        searchCriteria.EndDate = searchCriteria.StartDate.Value.AddMonths(1).AddDays(-1);
    }

    private async Task LoadDashboardData()
    {
        var transactions = await TransactionService.GetTransactionsAsync();
        transactions = transactions.Where(t => t.TransactionDate >= searchCriteria.StartDate && t.TransactionDate <= searchCriteria.EndDate).ToList();

        totalCashInflows = transactions.Where(t => t.TransactionTransactionType == TransactionType.Credit).Sum(t => t.TransactionAmount);
        totalCashOutflows = transactions.Where(t => t.TransactionTransactionType == TransactionType.Debit).Sum(t => t.TransactionAmount);

        var debts = await DebtService.GetDebtsAsync();
        totalDebts = debts.Sum(d => d.DebtAmount);
        clearedDebts = debts.Where(d => d.IsCleared).Sum(d => d.DebtAmount);
        remainingDebts = totalDebts - clearedDebts;
        pendingDebts = debts.Where(d => !d.IsCleared).ToList(); // Ensure pending debts are correctly filtered

        // Include cleared debts in the outflow calculation
        totalCashOutflows += clearedDebts;

        topHighestTransactions = transactions.OrderByDescending(t => t.TransactionAmount).ThenBy(t => t.TransactionDate).Take(5).ToList();
        topLowestTransactions = transactions.OrderBy(t => t.TransactionAmount).ThenBy(t => t.TransactionDate).Take(5).ToList();

        highestInflow = transactions.Where(t => t.TransactionTransactionType == TransactionType.Credit).OrderByDescending(t => t.TransactionAmount).FirstOrDefault();
        highestOutflow = transactions.Where(t => t.TransactionTransactionType == TransactionType.Debit).OrderByDescending(t => t.TransactionAmount).FirstOrDefault();
        lowestInflow = transactions.Where(t => t.TransactionTransactionType == TransactionType.Credit).OrderBy(t => t.TransactionAmount).FirstOrDefault();
        lowestOutflow = transactions.Where(t => t.TransactionTransactionType == TransactionType.Debit).OrderBy(t => t.TransactionAmount).FirstOrDefault();
    }

    private void ClearFilters()
    {
        SetDefaultDates();
        LoadDashboardData();
    }

    private class SearchCriteria
    {
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
    }
}
